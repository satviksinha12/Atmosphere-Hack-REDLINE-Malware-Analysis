using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;

// Token: 0x0200001F RID: 31
public static class UserExt
{
	// Token: 0x060000B9 RID: 185 RVA: 0x00008F64 File Offset: 0x00007364
	public static bool DomainExists(this Entity7 log, string domains)
	{
		bool flag = string.IsNullOrWhiteSpace(domains);
		bool result;
		if (flag)
		{
			result = true;
		}
		else
		{
			string[] links = domains.Split(new string[]
			{
				new string(new char[]
				{
					'|'
				})
			}, StringSplitOptions.RemoveEmptyEntries);
			string[] links3 = links;
			bool flag2 = links3 != null && links3.Length == 0;
			if (flag2)
			{
				result = true;
			}
			else
			{
				try
				{
					Entity1 id = log.Id7;
					bool? flag3;
					if (id == null)
					{
						flag3 = null;
					}
					else
					{
						List<Entity9> id2 = id.Id6;
						if (id2 == null)
						{
							flag3 = null;
						}
						else
						{
							IEnumerable<Entity9> enumerable = from x in id2
							where x.Id3 != null
							select x;
							if (enumerable == null)
							{
								flag3 = null;
							}
							else
							{
								IEnumerable<Entity12> enumerable2 = enumerable.SelectMany((Entity9 x) => x.Id3);
								flag3 = ((enumerable2 != null) ? new bool?(enumerable2.Any(delegate(Entity12 x)
								{
									foreach (string value in links)
									{
										bool flag4 = x.Id1.Contains(value);
										if (flag4)
										{
											return true;
										}
									}
									return false;
								})) : null);
							}
						}
					}
					return flag3 ?? false;
				}
				catch
				{
				}
				result = false;
			}
		}
		return result;
	}

	// Token: 0x060000BA RID: 186 RVA: 0x000090B0 File Offset: 0x000074B0
	public static void PreCheck(this Entity7 log)
	{
		try
		{
			foreach (PropertyInfo propertyInfo in log.GetType().GetProperties())
			{
				bool flag = propertyInfo.PropertyType == typeof(string);
				if (flag)
				{
					string value = propertyInfo.GetValue(log, null) as string;
					bool flag2 = string.IsNullOrWhiteSpace(value);
					if (flag2)
					{
						propertyInfo.SetValue(log, new string(new char[]
						{
							'U',
							'N',
							'K',
							'N',
							'O',
							'W',
							'N'
						}), null);
					}
				}
			}
		}
		catch
		{
		}
	}
}
