using System;
using System.Linq;
using System.Text;

// Token: 0x0200001B RID: 27
public class EntityReaderSql
{
	// Token: 0x17000005 RID: 5
	// (get) Token: 0x060000A5 RID: 165 RVA: 0x00007D39 File Offset: 0x00006139
	public int RowLength
	{
		get
		{
			return this.Count();
		}
	}

	// Token: 0x060000A6 RID: 166 RVA: 0x00007D44 File Offset: 0x00006144
	public EntityReaderSql(string fileName)
	{
		this._sqlDataTypeSize = (from x in new string(new char[]
		{
			'0',
			'1',
			'2',
			'3',
			'4',
			'6',
			'8',
			'8',
			'0',
			'0'
		})
		select Convert.ToByte((int)(x - '0'))).ToArray<byte>();
		this._fileBytes = fileName.ReadFile();
		this._pageSize = this.ConvertToULong(16, 2);
		this._dbEncoding = this.ConvertToULong(56, 4);
		this.ReadMasterOfContext(100L);
	}

	// Token: 0x060000A7 RID: 167 RVA: 0x00007DD4 File Offset: 0x000061D4
	public string GatherValue(int rowIndex, string fieldName)
	{
		string result;
		try
		{
			int num = -1;
			int num2 = this.Fields.Length - 1;
			for (int i = 0; i <= num2; i++)
			{
				bool flag = this.Fields[i].ToLower().Trim().CompareTo(fieldName.ToLower().Trim()) == 0;
				if (flag)
				{
					num = i;
					break;
				}
			}
			bool flag2 = num == -1;
			if (flag2)
			{
				result = null;
			}
			else
			{
				result = this.ReadContextValue(rowIndex, num);
			}
		}
		catch
		{
			result = null;
		}
		return result;
	}

	// Token: 0x060000A8 RID: 168 RVA: 0x00007E6C File Offset: 0x0000626C
	private void ReadMasterOfContext(long offset)
	{
		try
		{
			byte b = this._fileBytes[(int)(checked((IntPtr)offset))];
			if (b != 5)
			{
				if (b == 13)
				{
					ulong num = this.ConvertToULong((int)offset + 3, 2) - 1UL;
					int num2 = 0;
					bool flag = this._masterTableEntries != null;
					if (flag)
					{
						num2 = this._masterTableEntries.Length;
						this._masterTableEntries = EntityReaderSql.ChangeSize<SME>(this._masterTableEntries, this._masterTableEntries.Length + (int)num + 1);
					}
					else
					{
						this._masterTableEntries = new SME[num + 1UL];
					}
					for (ulong num3 = 0UL; num3 <= num; num3 += 1UL)
					{
						ulong num4 = this.ConvertToULong((int)offset + 8 + (int)num3 * 2, 2);
						bool flag2 = offset != 100L;
						if (flag2)
						{
							num4 += (ulong)offset;
						}
						int num5 = this.Gvl((int)num4);
						this.Cvl((int)num4, num5);
						int num6 = this.Gvl((int)(num4 + (ulong)((long)num5 - (long)num4) + 1UL));
						this.Cvl((int)(num4 + (ulong)((long)num5 - (long)num4) + 1UL), num6);
						ulong num7 = num4 + (ulong)((long)num6 - (long)num4 + 1L);
						int num8 = this.Gvl((int)num7);
						int num9 = num8;
						long num10 = this.Cvl((int)num7, num8);
						long[] array = new long[5];
						for (int i = 0; i <= 4; i++)
						{
							int startIdx = num9 + 1;
							num9 = this.Gvl(startIdx);
							array[i] = this.Cvl(startIdx, num9);
							array[i] = (long)((array[i] <= 9L) ? ((ulong)this._sqlDataTypeSize[(int)(checked((IntPtr)array[i]))]) : ((ulong)((!EntityReaderSql.IsOdd(array[i])) ? ((array[i] - 12L) / 2L) : ((array[i] - 13L) / 2L))));
						}
						bool flag3 = this._dbEncoding == 1UL || this._dbEncoding == 2UL;
						if (flag3)
						{
							bool flag4 = this._dbEncoding == 1UL;
							if (flag4)
							{
								this._masterTableEntries[num2 + (int)num3].ItemName = Encoding.GetEncoding(new string(new char[]
								{
									'w',
									'i',
									'n',
									'd',
									'o',
									'w',
									's',
									'-',
									'1',
									'2',
									'5',
									'1'
								})).GetString(this._fileBytes, (int)(num7 + (ulong)num10 + (ulong)array[0]), (int)array[1]);
							}
							else
							{
								bool flag5 = this._dbEncoding == 2UL;
								if (flag5)
								{
									this._masterTableEntries[num2 + (int)num3].ItemName = Encoding.Unicode.GetString(this._fileBytes, (int)(num7 + (ulong)num10 + (ulong)array[0]), (int)array[1]);
								}
								else
								{
									bool flag6 = this._dbEncoding == 3UL;
									if (flag6)
									{
										this._masterTableEntries[num2 + (int)num3].ItemName = Encoding.BigEndianUnicode.GetString(this._fileBytes, (int)(num7 + (ulong)num10 + (ulong)array[0]), (int)array[1]);
									}
								}
							}
						}
						this._masterTableEntries[num2 + (int)num3].RootNum = (long)this.ConvertToULong((int)(num7 + (ulong)num10 + (ulong)array[0] + (ulong)array[1] + (ulong)array[2]), (int)array[3]);
						bool flag7 = this._dbEncoding == 1UL;
						if (flag7)
						{
							this._masterTableEntries[num2 + (int)num3].SqlStatement = Encoding.GetEncoding(new string(new char[]
							{
								'w',
								'i',
								'n',
								'd',
								'o',
								'w',
								's',
								'-',
								'1',
								'2',
								'5',
								'1'
							})).GetString(this._fileBytes, (int)(num7 + (ulong)num10 + (ulong)array[0] + (ulong)array[1] + (ulong)array[2] + (ulong)array[3]), (int)array[4]);
						}
						else
						{
							bool flag8 = this._dbEncoding == 2UL;
							if (flag8)
							{
								this._masterTableEntries[num2 + (int)num3].SqlStatement = Encoding.Unicode.GetString(this._fileBytes, (int)(num7 + (ulong)num10 + (ulong)array[0] + (ulong)array[1] + (ulong)array[2] + (ulong)array[3]), (int)array[4]);
							}
							else
							{
								bool flag9 = this._dbEncoding == 3UL;
								if (flag9)
								{
									this._masterTableEntries[num2 + (int)num3].SqlStatement = Encoding.BigEndianUnicode.GetString(this._fileBytes, (int)(num7 + (ulong)num10 + (ulong)array[0] + (ulong)array[1] + (ulong)array[2] + (ulong)array[3]), (int)array[4]);
								}
							}
						}
					}
				}
			}
			else
			{
				uint num11 = (uint)(this.ConvertToULong((int)offset + 3, 2) - 1UL);
				for (int j = 0; j <= (int)num11; j++)
				{
					uint num12 = (uint)this.ConvertToULong((int)offset + 12 + j * 2, 2);
					bool flag10 = offset == 100L;
					if (flag10)
					{
						this.ReadMasterOfContext((long)((this.ConvertToULong((int)num12, 4) - 1UL) * this._pageSize));
					}
					else
					{
						this.ReadMasterOfContext((long)((this.ConvertToULong((int)(offset + (long)((ulong)num12)), 4) - 1UL) * this._pageSize));
					}
				}
				this.ReadMasterOfContext((long)((this.ConvertToULong((int)offset + 8, 4) - 1UL) * this._pageSize));
			}
		}
		catch
		{
		}
	}

	// Token: 0x060000A9 RID: 169 RVA: 0x0000835C File Offset: 0x0000675C
	public bool ReadContextTable(string tableName)
	{
		bool result;
		try
		{
			int num = -1;
			for (int i = 0; i <= this._masterTableEntries.Length; i++)
			{
				bool flag = string.Compare(this._masterTableEntries[i].ItemName.ToLower(), tableName.ToLower(), StringComparison.Ordinal) == 0;
				if (flag)
				{
					num = i;
					break;
				}
			}
			bool flag2 = num == -1;
			if (flag2)
			{
				result = false;
			}
			else
			{
				string[] array = this._masterTableEntries[num].SqlStatement.Substring(this._masterTableEntries[num].SqlStatement.IndexOf("(", StringComparison.Ordinal) + 1).Split(new char[]
				{
					','
				});
				for (int j = 0; j <= array.Length - 1; j++)
				{
					array[j] = array[j].TrimStart(new char[0]);
					int num2 = array[j].IndexOf(' ');
					bool flag3 = num2 > 0;
					if (flag3)
					{
						array[j] = array[j].Substring(0, num2);
					}
					bool flag4 = array[j].IndexOf("UNIQUE", StringComparison.Ordinal) != 0;
					if (flag4)
					{
						this.Fields = EntityReaderSql.ChangeSize<string>(this.Fields, j + 1);
						this.Fields[j] = array[j];
					}
				}
				result = this.GetOffset((ulong)((this._masterTableEntries[num].RootNum - 1L) * (long)this._pageSize));
			}
		}
		catch
		{
			result = false;
		}
		return result;
	}

	// Token: 0x060000AA RID: 170 RVA: 0x000084F4 File Offset: 0x000068F4
	private bool GetOffset(ulong offset)
	{
		bool result;
		try
		{
			bool flag = this._fileBytes[(int)(checked((IntPtr)offset))] == 13;
			if (flag)
			{
				uint num = (uint)(this.ConvertToULong((int)offset + 3, 2) - 1UL);
				int num2 = 0;
				bool flag2 = this._tableEntries != null;
				if (flag2)
				{
					num2 = this._tableEntries.Length;
					this._tableEntries = EntityReaderSql.ChangeSize<Tе>(this._tableEntries, this._tableEntries.Length + (int)num + 1);
				}
				else
				{
					this._tableEntries = new Tе[num + 1U];
				}
				for (uint num3 = 0U; num3 <= num; num3 += 1U)
				{
					ulong num4 = this.ConvertToULong((int)offset + 8 + (int)(num3 * 2U), 2);
					bool flag3 = offset != 100UL;
					if (flag3)
					{
						num4 += offset;
					}
					int num5 = this.Gvl((int)num4);
					this.Cvl((int)num4, num5);
					int num6 = this.Gvl((int)(num4 + (ulong)((long)num5 - (long)num4) + 1UL));
					this.Cvl((int)(num4 + (ulong)((long)num5 - (long)num4) + 1UL), num6);
					ulong num7 = num4 + (ulong)((long)num6 - (long)num4 + 1L);
					int num8 = this.Gvl((int)num7);
					int num9 = num8;
					long num10 = this.Cvl((int)num7, num8);
					RecordHeaderField[] array = null;
					long num11 = (long)(num7 - (ulong)((long)num8) + 1UL);
					int num12 = 0;
					while (num11 < num10)
					{
						array = EntityReaderSql.ChangeSize<RecordHeaderField>(array, num12 + 1);
						int num13 = num9 + 1;
						num9 = this.Gvl(num13);
						array[num12].Type = this.Cvl(num13, num9);
						array[num12].Size = (long)((array[num12].Type <= 9L) ? ((ulong)this._sqlDataTypeSize[(int)(checked((IntPtr)array[num12].Type))]) : ((ulong)((!EntityReaderSql.IsOdd(array[num12].Type)) ? ((array[num12].Type - 12L) / 2L) : ((array[num12].Type - 13L) / 2L))));
						num11 = num11 + (long)(num9 - num13) + 1L;
						num12++;
					}
					bool flag4 = array != null;
					if (flag4)
					{
						this._tableEntries[num2 + (int)num3].Content = new string[array.Length];
						int num14 = 0;
						for (int i = 0; i <= array.Length - 1; i++)
						{
							bool flag5 = array[i].Type > 9L;
							if (flag5)
							{
								bool flag6 = !EntityReaderSql.IsOdd(array[i].Type);
								if (flag6)
								{
									bool flag7 = this._dbEncoding == 1UL;
									if (flag7)
									{
										this._tableEntries[num2 + (int)num3].Content[i] = Encoding.GetEncoding(new string(new char[]
										{
											'w',
											'i',
											'n',
											'd',
											'o',
											'w',
											's',
											'-',
											'1',
											'2',
											'5',
											'1'
										})).GetString(this._fileBytes, (int)(num7 + (ulong)num10 + (ulong)((long)num14)), (int)array[i].Size);
									}
									else
									{
										bool flag8 = this._dbEncoding == 2UL;
										if (flag8)
										{
											this._tableEntries[num2 + (int)num3].Content[i] = Encoding.Unicode.GetString(this._fileBytes, (int)(num7 + (ulong)num10 + (ulong)((long)num14)), (int)array[i].Size);
										}
										else
										{
											bool flag9 = this._dbEncoding == 3UL;
											if (flag9)
											{
												this._tableEntries[num2 + (int)num3].Content[i] = Encoding.BigEndianUnicode.GetString(this._fileBytes, (int)(num7 + (ulong)num10 + (ulong)((long)num14)), (int)array[i].Size);
											}
										}
									}
								}
								else
								{
									this._tableEntries[num2 + (int)num3].Content[i] = Encoding.GetEncoding(new string(new char[]
									{
										'w',
										'i',
										'n',
										'd',
										'o',
										'w',
										's',
										'-',
										'1',
										'2',
										'5',
										'1'
									})).GetString(this._fileBytes, (int)(num7 + (ulong)num10 + (ulong)((long)num14)), (int)array[i].Size);
								}
							}
							else
							{
								this._tableEntries[num2 + (int)num3].Content[i] = Convert.ToString(this.ConvertToULong((int)(num7 + (ulong)num10 + (ulong)((long)num14)), (int)array[i].Size));
							}
							num14 += (int)array[i].Size;
						}
					}
				}
			}
			else
			{
				bool flag10 = this._fileBytes[(int)(checked((IntPtr)offset))] == 5;
				if (flag10)
				{
					uint num15 = (uint)(this.ConvertToULong((int)(offset + 3UL), 2) - 1UL);
					for (uint num16 = 0U; num16 <= num15; num16 += 1U)
					{
						uint num17 = (uint)this.ConvertToULong((int)offset + 12 + (int)(num16 * 2U), 2);
						this.GetOffset((this.ConvertToULong((int)(offset + (ulong)num17), 4) - 1UL) * this._pageSize);
					}
					this.GetOffset((this.ConvertToULong((int)(offset + 8UL), 4) - 1UL) * this._pageSize);
				}
			}
			result = true;
		}
		catch
		{
			result = false;
		}
		return result;
	}

	// Token: 0x060000AB RID: 171 RVA: 0x00008A20 File Offset: 0x00006E20
	public string ReadContextValue(int rowNum, int field)
	{
		string result;
		try
		{
			bool flag = rowNum >= this._tableEntries.Length;
			if (flag)
			{
				result = null;
			}
			else
			{
				result = ((field >= this._tableEntries[rowNum].Content.Length) ? null : this._tableEntries[rowNum].Content[field]);
			}
		}
		catch
		{
			result = "";
		}
		return result;
	}

	// Token: 0x060000AC RID: 172 RVA: 0x00008A90 File Offset: 0x00006E90
	private ulong ConvertToULong(int startIndex, int size)
	{
		ulong result;
		try
		{
			bool flag = size > 8 | size == 0;
			if (flag)
			{
				result = 0UL;
			}
			else
			{
				ulong num = 0UL;
				for (int i = 0; i <= size - 1; i++)
				{
					num = (num << 8 | (ulong)this._fileBytes[startIndex + i]);
				}
				result = num;
			}
		}
		catch
		{
			result = 0UL;
		}
		return result;
	}

	// Token: 0x060000AD RID: 173 RVA: 0x00008AF8 File Offset: 0x00006EF8
	public int Count()
	{
		return this._tableEntries.Length;
	}

	// Token: 0x060000AE RID: 174 RVA: 0x00008B14 File Offset: 0x00006F14
	private int Gvl(int startIdx)
	{
		int result;
		try
		{
			bool flag = startIdx > this._fileBytes.Length;
			if (flag)
			{
				result = 0;
			}
			else
			{
				for (int i = startIdx; i <= startIdx + 8; i++)
				{
					bool flag2 = i > this._fileBytes.Length - 1;
					if (flag2)
					{
						return 0;
					}
					bool flag3 = (this._fileBytes[i] & 128) != 128;
					if (flag3)
					{
						return i;
					}
				}
				result = startIdx + 8;
			}
		}
		catch
		{
			result = 0;
		}
		return result;
	}

	// Token: 0x060000AF RID: 175 RVA: 0x00008BA4 File Offset: 0x00006FA4
	private long Cvl(int startIdx, int endIdx)
	{
		long result;
		try
		{
			endIdx++;
			byte[] array = new byte[8];
			int num = endIdx - startIdx;
			bool flag = false;
			bool flag2 = num == 0 | num > 9;
			if (flag2)
			{
				result = 0L;
			}
			else
			{
				bool flag3 = num == 1;
				if (flag3)
				{
					array[0] = (this._fileBytes[startIdx] & 127);
					result = BitConverter.ToInt64(array, 0);
				}
				else
				{
					bool flag4 = num == 9;
					if (flag4)
					{
						flag = true;
					}
					int num2 = 1;
					int num3 = 7;
					int num4 = 0;
					bool flag5 = flag;
					if (flag5)
					{
						array[0] = this._fileBytes[endIdx - 1];
						endIdx--;
						num4 = 1;
					}
					for (int i = endIdx - 1; i >= startIdx; i += -1)
					{
						bool flag6 = i - 1 >= startIdx;
						if (flag6)
						{
							array[num4] = (byte)((this._fileBytes[i] >> num2 - 1 & 255 >> num2) | (int)this._fileBytes[i - 1] << num3);
							num2++;
							num4++;
							num3--;
						}
						else
						{
							bool flag7 = !flag;
							if (flag7)
							{
								array[num4] = (byte)(this._fileBytes[i] >> num2 - 1 & 255 >> num2);
							}
						}
					}
					result = BitConverter.ToInt64(array, 0);
				}
			}
		}
		catch
		{
			result = 0L;
		}
		return result;
	}

	// Token: 0x060000B0 RID: 176 RVA: 0x00008D10 File Offset: 0x00007110
	private static bool IsOdd(long value)
	{
		return (value & 1L) == 1L;
	}

	// Token: 0x060000B1 RID: 177 RVA: 0x00008D2C File Offset: 0x0000712C
	public static T[] ChangeSize<T>(T[] oldArray, int newSize)
	{
		T[] result = oldArray;
		Array.Resize<T>(ref result, newSize);
		return result;
	}

	// Token: 0x0400000D RID: 13
	private readonly byte[] _sqlDataTypeSize;

	// Token: 0x0400000E RID: 14
	private readonly ulong _dbEncoding;

	// Token: 0x0400000F RID: 15
	private readonly byte[] _fileBytes;

	// Token: 0x04000010 RID: 16
	private readonly ulong _pageSize;

	// Token: 0x04000011 RID: 17
	public string[] Fields;

	// Token: 0x04000012 RID: 18
	private SME[] _masterTableEntries;

	// Token: 0x04000013 RID: 19
	private Tе[] _tableEntries;
}
